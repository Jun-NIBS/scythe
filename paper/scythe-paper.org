#+title: Scythe: A tool for removing 3'-end adapter contaminants using Bayesian classification
#+author: Vince Buffalo
#+email: vsbuffalo@ucdavis.edu
#+date: 
#+babel: :results output :exports both :session :comments org

* 3'-end Contamination

Scythe focuses on 3'-end contaminants, specifically those due to
adapters or barcodes. Many second-generation sequencing technologies
such as Illumina's Genome Analyzer II and HiSeq have lower-quality
3'-end bases. These low-quality bases are more likely to have
nucleotides called incorrectly, making contaminant identification more
difficult. Futhermore, 3'-end quality deterioration is not uniform
across all reads; as figure \ref{fig:qual_plot} shows, there is
variation in the quality per base.

#+caption: 3'-end quality deterioration.
#+label: fig:qual_plot
#+attr_latex: width=12cm
[[./qual_plot.png]]

A common step in read quality improvement procedures is to remove
these low-quality 3'-end sequences from reads. This is thought to
increase mapping rates and improve assembly quality. However doing
quality-based 3'-end trimming before contaminant removal would remove
sequence that could be used (despite being unreliable) to identify the
contaminants more positively. Scythe takes the approach that it is
better to use full information, even if it's unreliable. How
unreliable a base is is indicated by the FASTQ quality score, which
can be incorporated into classification procedures.

Fixed-number of mismatch approaches have the disadvantage that they
don't differentially weight a mismatch on a low-quality base from a
mismatch on a high-quality base. Futhermore, the fixed-number could
easily be exhausted in a run of bad bases, even though every
good-quality base perfectly matches the contaminant sequence.


* Scythe's Methods

Scythe uses Bayesian methods to identify 3'-end contaminants. Scythe
does not address the problem of contaminants found anywhere in the
read; contaminants in higher quality regions are easier to identify
and fixed-number of mismatch techniques are accurate and
fastest. Scythe only addresses the challenging problem of contaminants
in low-quality 3-ends. In doing so, it makes some assumptions:

1. All contaminants sequences are known /a priori/ and are reliable.
2. A contaminant sequence with length $l_c$ in a read of length $l_r$
   will only be found between $l_r - l_c$  and $l_r$.
3. If the read is contaminated, the number of bases contaminating the
   read $n_c$ is limited to $1 \le n_c \le l_c$, and always beginning from
   the 5'-end of the contaminant sequence. While this seems limiting,
   it is the mode by which 3'-end adapter and barcode contamination
   occurs.[fn:: We have encountered Illumina data in which adapters
   contaminate the read and are present past their length in the
   3'-end. The sequence after the adapter was all poly-A
   sequence. These extreme cases can be removed by appending poly-A
   sequence to the end of the adapters in the adapters file.]
4. Contaminants will only have mismatching bases; no contaminants with
   insertions, deletions, or transpositions will be addressed by Scythe.
5. The quality line of the FASTQ file accurately estimates the
   probability of bases being called correctly.

** String matching in Scythe

Scythe begins by searching for a length of contaminant in the
read. For each adapter in the file, Scythe looks for the best match in
terms of scores. A nucleotide match is scored as a 1, and a mismatch
is scored as a -1. Because Scythe doesn't address contaminants with
insertions or deletions, it doesn't use a standard alignment strategy
(i.e. dynamic programming). Instead, it considers every possible
substring of contamination: for a contaminant of length $l_c$, it
scores all possible substrings from the 5'-end of the contaminant. The
top scoring match is then used in the classification procedure. For
efficiency, other matches are not used in the classification
procedure.[fn:: This option may be added to further Scythe versions.]

The time complexity of Scythe's match algorithm for a single adapter
of length is $l_a$ $O(l_a^2 * R)$ for a FASTQ file with $R$ entries.

** Bayesian classification of top-scoring matches

There are two mutually exclusive and exhaustive events: a top scoring
match is a contaminant or it is random sequence (that happens to be
similar to the adapter contaminant). A likelihood for each of these
events, given probabilities of each base being called correctly and
which bases mismatch the contaminant sequence, can be calculated.

These likelihood functions assume models of error for each event. If
the top-scoring match is contaminant sequence (event $C$), the
likelihood $P(S | C)$ (where $S$ is the sequence match data) is:

$$ P(S | C) = \prod_i^{l_t} q_i^{m_i} \cdot (1-q_i)^{1 - m_i} $$

Where $m_i \in \{0, 1\}$ indicating whether the $i$ base is a
mismatch or match (respectively) and $q_i$ is the probability the $i$
base is called correctly (from the ASCII-encoded quality). $l_t$ is
the length of the top-scoring match.

If the top-scoring sequence is not a contaminant sequence (event
$C'$), it is assumed that the matches are just by chance. Thus, the
likelihood function is:

$$ P(S | C') = \prod_i^{l_t} \left(\frac{1}{4}\right)^{m_i} \cdot \left(\frac{3}{4}\right)^{1 - m_i} $$

These likelihoods can then be combined using Bayes' Thereom to give
the probability of contamination given then top-scoring match:

$$ P(C|S) = \frac{P(C) P(S|C)}{P(S)} $$

Where the denominator can be replaced with $P(S) = P(S | C)P(C) +
P(S | C') P(C')$ by the Law of Total Probability. $P(C'|S)$ is
calculated similarly. Since these are mutually exclusive and
exhaustive events, the /maximum a posteriori/ rule can be used to
classify a top-scoring sequence as either contaminated or
non-contaminated (e.g. if $P(C'|S) > P(C|S)$, the sequence is not
contaminated and visa-versa).

Required in this Bayesian formulation is the prior of contamination,
$P(C)$. Specifying the prior may seem like a nuisance, but it allows
ultimately allows for more accurate classification in a variety of
different contamination scenarios. The prior doesn't need to be
estimated increadibly well; one technique that works well is to view
the FASTQ file in the Unix command line tool less and search for the
5'-end bases of the adapter contaminant. The number of results on a
page of less output divided by the number of FASTQ entries on that
page works well as an initial guess for the prior.

* Results

Scythe was tested against two similar program: Btrim (Kong, 2011) and
Cutadapt (Martin, 2011). Btrim

Cutadapt has an advantage over Scythe in that it does gapped
alignments (originally it was developed to trim 454 sequences which
have homopolymer repeats).
